/*
  Name: Yifan Zhu
  Email: yiz257@ucsd.edu
  PID: A17961811
  Sources used: PA8 Source Writeup, In-class Notes, Javadoc
  
  This file is used to implement BST.
*/

import java.util.ArrayList;

/**
 * MyBST is a static nested class of the MyBST class
 * 
 * Instance Variables:
 * root - A reference to the root node of our tree.
 * size - Represents the number of nodes in the tree.
 */
public class MyBST<K extends Comparable<K>, V> {
    /** Instance variables */
    MyBSTNode<K, V> root = null;
    int size = 0;

    /**
     * Returns the number of nodes in the BST.
     * 
     * @return The size of the BST.
     */
    public int size() {
        return size;
    }

    /**
     * Inserts a new node with the specified key and 
     * value into the BST. If a node with the given key 
     * already exists, its value is replaced with new value.
     * 
     * @param key   The key of the node to insert.
     * @param value The value of the node to insert.
     * @return The original value associated with the key
     * @throws NullPointerException if the key is null.
     */
    public V insert(K key, V value) {
        if (key == null)
            throw new NullPointerException();

        MyBSTNode<K, V> parent = null;
        MyBSTNode<K, V> curr = root;

        while (curr != null){
            parent = curr;
            //create to store the comparison of parent and inserted key
            int compareValue1 = key.compareTo(curr.getKey());

            if (compareValue1 < 0)
                curr = curr.getLeft();
            else if (compareValue1 > 0)
                curr = curr.getRight();
            else{
                //create to store the replaced value
                V replaced = curr.getValue();
                curr.setValue(value);
                return replaced;
            }
        }

        // create the new inserted node
        MyBSTNode<K, V> inserted = new MyBSTNode<K,V>(key, value, parent);

        if (parent == null){
            root = inserted;
            size++;
            return null;
        }
            
            
        //create to store the comparison of parent and inserted key
        int compareValue2 = key.compareTo(parent.getKey());
        if (compareValue2 < 0)
            parent.setLeft(inserted);
        else
            parent.setRight(inserted);

        size++;
        return null;
    }

    /**
     * Searches for a node with the specified key and returns 
     * its value.
     * 
     * @param key The key to search for.
     * @return The value associated with the specified key
     */
    public V search(K key) {
        if (key == null)
            return null;
        
        //create to store the current node to compare
        MyBSTNode<K, V> curr = root;
        
        while (curr != null){
            int compareValue = key.compareTo(curr.getKey());
            if (compareValue < 0)
                curr = curr.getLeft();
            else if (compareValue > 0)
                curr = curr.getRight();
            else
                return curr.getValue();
        }
        return null;
    }

    /**
     * Removes the node with the specified key from the BST 
     * and returns its value.
     * 
     * @param key The key of the node to remove.
     * @return The value of the removed node
     */
    public V remove(K key) {
        if (key == null)
            return null;
        
        //create to store the current and parent node to compare
        MyBSTNode<K, V> curr = root;
        MyBSTNode<K, V> parent = null;
        
        while (curr != null){
            int compareValue = key.compareTo(curr.getKey());
            if (compareValue < 0){
                parent = curr;
                curr = curr.getLeft();
            }else if (compareValue > 0){
                parent = curr;
                curr = curr.getRight();
            }else
                break;
        }

        if (curr == null)
            return null;

        V replaced = curr.getValue();

        if (curr.getLeft() == null || curr.getRight() == null){
            MyBSTNode<K, V> newChild = (curr.getLeft() != null)
                ? curr.getLeft() : curr.getRight();
                
            if (parent == null)
                root = newChild;
            else if (curr.equals(parent.getLeft()))
                parent.setLeft(newChild);
            else
                parent.setRight(newChild);
                
            if (newChild != null)
                newChild.setParent(parent);
            size--;
        }else{
            MyBSTNode<K, V> succ = curr.successor();
            remove(succ.getKey());
            curr.setKey(succ.getKey());
            curr.setValue(succ.getValue());
        }
        return replaced;
    }

    /**
     * Performs an in-order traversal of the BST and returns 
     * a list of the nodes.
     * 
     * @return An ArrayList containing all nodes in the BST 
     *         in in-order sequence.
     */
    public ArrayList<MyBSTNode<K, V>> inorder() {
        ArrayList<MyBSTNode<K, V>> inOrderList = new ArrayList<>();
        if (root == null)
            return inOrderList;

        MyBSTNode<K, V> curr = root;
        while (curr.getLeft() != null)
            curr = curr.getLeft();

        while (curr != null){
            inOrderList.add(curr);
            curr = curr.successor();
        }

        return inOrderList;
    }
    /**
     * Copies the BST and returns a new MyBST reference 
     * that is an exact copy of all nodes from the original tree.
     * 
     * @return A new MyBST instance that is a deep copy 
     *          of the original BST.
     */
    public MyBST<K, V> copy() {
        MyBST<K, V> newTree = new MyBST<>();
        newTree.root = copyRecursive(root);
        newTree.size = this.size();
        return newTree;
    }
    /**
     * Helper method to recursively copy the nodes of the BST.
     * 
     * @param node The current node to copy.
     * @return The new copied node.
     */
    private MyBSTNode<K, V> copyRecursive(MyBSTNode<K, V> node) {
        if (node == null)
            return null;
        
        MyBSTNode<K, V> newNode = new MyBSTNode<>(node.getKey(),
            node.getValue(), null);
        
        newNode.setLeft(copyRecursive(node.getLeft()));
        newNode.setRight(copyRecursive(node.getRight()));

        if (newNode.getLeft() != null)
            newNode.getLeft().setParent(newNode);
        if (newNode.getRight() != null)
            newNode.getRight().setParent(newNode);
        
        return newNode;
    }

    /**
     * Node class for MyBST. Each node stores a key, a value, 
     * and references to its parent, left child, and right child.
     */
    static class MyBSTNode<K, V> {
        private static final String TEMPLATE = "Key: %s, Value: %s";
        private static final String NULL_STR = "null";

        private K key;
        private V value;
        private MyBSTNode<K, V> parent;
        private MyBSTNode<K, V> left = null;
        private MyBSTNode<K, V> right = null;

        /**
         * Creates a MyBSTNode storing specified data
         *
         * @param key    the key the MyBSTNode will have
         * @param value  the data the MyBSTNode will store
         * @param parent the parent of this node
         */
        public MyBSTNode(K key, V value, MyBSTNode<K, V> parent) {
            this.key = key;
            this.value = value;
            this.parent = parent;
        }

        /**
         * Return the key stored in the the MyBSTNode
         *
         * @return the key stored in the MyBSTNode
         */
        public K getKey() {
            return key;
        }

        /**
         * Set the key stored in the MyBSTNode
         *
         * @param newKey the key to be stored
         */
        public void setKey(K newKey) {
            this.key = newKey;
        }

        /**
         * Return data stored in the MyBSTNode
         *
         * @return the data stored in the MyBSTNode
         */
        public V getValue() {
            return value;
        }

        /**
         * Set the data stored in the MyBSTNode
         *
         * @param newValue the data to be stored
         */
        public void setValue(V newValue) {
            this.value = newValue;
        }

        /**
         * Return the parent
         *
         * @return the parent
         */
        public MyBSTNode<K, V> getParent() {
            return parent;
        }

        /**
         * Set the parent
         *
         * @param newParent the parent
         */
        public void setParent(MyBSTNode<K, V> newParent) {
            this.parent = newParent;
        }

        /**
         * Return the left child
         *
         * @return left child
         */
        public MyBSTNode<K, V> getLeft() {
            return left;
        }

        /**
         * Set the left child
         *
         * @param newLeft the new left child
         */
        public void setLeft(MyBSTNode<K, V> newLeft) {
            this.left = newLeft;
        }

        /**
         * Return the right child
         *
         * @return right child
         */
        public MyBSTNode<K, V> getRight() {
            return right;
        }

        /**
         * Set the right child
         *
         * @param newRight the new right child
         */
        public void setRight(MyBSTNode<K, V> newRight) {
            this.right = newRight;
        }

        /**
         * Finds the successor of this node, which is the node with the 
         * smallest key greater than this node's key.
         * 
         * @return The successor node or null if it has no successor.
         */
        public MyBSTNode<K, V> successor() {
            if (getRight() != null){
                //create to store the successor
                MyBSTNode<K, V> succ = getRight();
                while(succ.getLeft() != null)
                    succ = succ.getLeft();
                return succ;
            }else{
                //create to store the current and its parent node
                MyBSTNode<K, V> curr = this;
                MyBSTNode<K, V> parent = curr.getParent();
                while (parent != null && curr.equals(parent.getRight())){
                    curr = parent;
                    parent = curr.getParent();
                }
                return parent;
            }
        }

        /**
         * This method compares if two node objects are equal.
         *
         * @param obj The target object that the currect object compares to.
         * @return Boolean value indicates if two node objects are equal
         */
        public boolean equals(Object obj) {
            if (!(obj instanceof MyBSTNode))
                return false;

            MyBSTNode<K, V> comp = (MyBSTNode<K, V>) obj;

            return ((this.getKey() == null ? comp.getKey() == null :
                    this.getKey().equals(comp.getKey()))
                    && (this.getValue() == null ? comp.getValue() == null :
                    this.getValue().equals(comp.getValue())));
        }

        /**
         * This method gives a string representation of node object.
         *
         * @return "Key:Value" that represents the node object
         */
        public String toString() {
            return String.format(
                    TEMPLATE,
                    this.getKey() == null ? NULL_STR : this.getKey(),
                    this.getValue() == null ? NULL_STR : this.getValue());
        }
    }

}
